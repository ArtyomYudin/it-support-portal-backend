import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import asyncio
import getpass
import re
from uuid import uuid4
from datetime import datetime, timezone

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from passlib.context import CryptContext
from sqlalchemy import select

from db.models import CoreUser
from db.database import Base  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
from core.settings import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# URL –ë–î (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ .env)
DATABASE_URL = (
    "postgresql+asyncpg://"
    f"{settings.DATABASE_USER}:{settings.DATABASE_PASSWORD}"
    f"@{settings.DATABASE_HOST}:{settings.DATABASE_PORT}"
    f"/{settings.DATABASE_NAME}"
)

engine = create_async_engine(DATABASE_URL, echo=False)  # echo=True –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
AsyncSessionLocal = sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False
)


# –í–∞–ª–∏–¥–∞—Ü–∏—è email
def validate_email(email: str) -> bool:
    pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    return re.match(pattern, email) is not None


# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)
def validate_password(password: str) -> bool:
    return len(password) >= 8


# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
def collect_user_data():
    print("\n" + "="*50)
    print("    –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("="*50)

    while True:
        email = input("Email: ").strip()
        if validate_email(email):
            break
        print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    while True:
        username = input("Username: ").strip()
        if username and len(username) >= 3:
            break
        print("Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤.")

    while True:
        first_name = input("–ò–º—è: ").strip()
        if first_name:
            break
        print("–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.")

    while True:
        last_name = input("–§–∞–º–∏–ª–∏—è: ").strip()
        if last_name:
            break
        print("–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.")

    while True:
        password = getpass.getpass("–ü–∞—Ä–æ–ª—å (–Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è): ")
        if validate_password(password):
            password2 = getpass.getpass("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            if password == password2:
                break
            else:
                print("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
        else:
            print("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤.")

    return {
        "email": email,
        "username": username,
        "first_name": first_name,
        "last_name": last_name,
        "password": password,
    }


async def create_superuser():
    user_data = collect_user_data()

    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        existing = await session.execute(
            select(CoreUser).where(
                (CoreUser.email == user_data["email"]) |
                (CoreUser.username == user_data["username"])
            )
        )
        if existing.scalar_one_or_none():
            print(f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email '{user_data['email']}' –∏–ª–∏ username '{user_data['username']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        hashed_password = pwd_context.hash(user_data["password"])

        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        superuser = CoreUser(
            id=uuid4(),
            username=user_data["username"],
            email=user_data["email"],
            first_name=user_data["first_name"],
            last_name=user_data["last_name"],
            is_active=True,
            is_superuser=True,
            created=datetime.now(timezone.utc),  # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UTC
            password_hash=hashed_password,
        )

        session.add(superuser)
        await session.commit()
        await session.refresh(superuser)

        print(f"\n–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"   Email: {superuser.email}")
        print(f"   Username: {superuser.username}")
        print(f"   ID: {superuser.id}")


# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
async def init_models():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


if __name__ == "__main__":
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    # print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)...")
    # asyncio.run(init_models())

    print("üë§ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    asyncio.run(create_superuser())